---
import Layout from '../layouts/Layout.astro'

interface Frontmatter {
  title: string
  id: string
}

const ideas = await Astro.glob<Frontmatter>('../ideas/*.md')
---

<Layout title={import.meta.env.PUBLIC_APP_TITLE}>
  <main>
    {
      ideas.map(({ frontmatter, Content }, index) => (
        <article id={frontmatter.id} class="idea">
          <div>
            <hgroup>
              <p>
                Idée reçue n°<strong>{index + 1}</strong>&nbsp;:
              </p>
              {/* eslint-disable-next-line astro/no-set-html-directive */}
              <h2 set:html={`«&nbsp;${frontmatter.title}&nbsp;»`} />
            </hgroup>
            <Content />
          </div>
        </article>
      ))
    }
  </main>
</Layout>

<style lang="sass">
  main
    display: flex
    flex-direction: column
    overflow-y: auto
    scroll-snap-type: y mandatory
    scroll-padding: 0 0 25%
    -webkit-overflow-scrolling: touch

  article
    width: 100%
    min-height: 100%
    flex-shrink: 0
    display: flex
    scroll-snap-align: start
    scroll-snap-stop: always

    color: var(--text)
    background-color: var(--background)

    & > div
      padding: 32px
      max-width: 900px
      margin: auto

      @media (min-width: 900px)
        margin-block: 0

    & > :global(p)
      @media (min-width: 900px)
        max-width: 80%

      &:last-of-type
        margin-bottom: 32px

    :global(aside)
      margin-top: 32px
      border: 16px solid
      border-image: url(../assets/frame_2_odd.svg) 16

      line-height: var(--24px)
      font-size: var(--16px)
      font-weight: 200

      @media (min-width: 900px)
        width: 50%
        margin-left: auto

      :global(ul)
        padding-left: 24px
      :global(li)
        list-style: disc
      :global(p)
        font: inherit
      :global(li)
        font: inherit

  hgroup
    display: flex
    flex-direction: column
    gap: 20px

    p
      display: inline-block
      width: max-content
      padding: 0 6px

      border: 4px solid
      border-image: url(../assets/frame_1_odd.svg) 4

      line-height: var(--32px)
      font-size: var(--24px)
      font-weight: 200

    h2
      position: relative
      margin-bottom: 32px

      &:after
        position: absolute
        bottom: -8px
        left: 0
        content: ''
        width: 100%
        height: 4px
        background: url(../assets/line_odd.svg) no-repeat top left

      :global(strong)
        font-weight: 900

  article:nth-child(even)
    --text: var(--white)
    --background: var(--grey-900)

    hgroup
      p
        border-image-source: url(../assets/frame_1_even.svg)
      h2:after
        background-image: url(../assets/line_even.svg)

    :global(a)
      color: var(--grey-100)
    :global(aside)
      border-image-source: url(../assets/frame_2_even.svg)
</style>

<script>
  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(entry => {
        if (!entry.isIntersecting) return

        history.replaceState(undefined, '', `#${entry.target.id}`)
        const titleElement = entry.target.querySelector('h2')

        const appTitle = import.meta.env.PUBLIC_APP_TITLE

        if (!titleElement) {
          document.title = appTitle
          return
        }

        document.title = `${titleElement.textContent} · ${appTitle}`
      })
    },
    {
      threshold: 0.5,
    }
  )

  document.querySelectorAll('article.idea').forEach(element => {
    observer.observe(element)
  })
</script>
